#include <iostream>
#include <string>
#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>

#include "main.h"

int main(int argc, const char *argv[]){
    int i, pulse, fd, number;
    imudata_packet_t *data;
    FILE *fp;
    char file_dir[50] = "/home/uav/code/controller/util/util1/simpletest";
    char bmp_data[10];

    motor.setPWMFreq(frequency);        //set frequency
    control_init();

    if(argc > 1){
        fd = gyro_init(argv[1]);
    }
    else{
        fd = gyro_init(default_port);
        printf("Using default port (%s)!\n", default_port);
    }
    sleep(1);


    while(1) {
        get_gyro_data(fd);
        //control();
/*
        for (i = 0; i < 7; i++)
            printf("data: %f    id: %d\n", imusol[i].imudata, imusol[i].data_id);

        cout << "==================================================" << endl;
*/
        sleep(10);
    }


    /**************************************************************************/
    /* Motor threshold :
     * motor1 : 1950
     * motor2 : 2400
     * motor3 : 1950
     * motor4 : 2000
     */
    /**************************************************************************/
/*
     do {
        cout << "==================================================" << endl;
        cout << "input the motor and its value "<< min_pulse << " ~ " << max_pulse << "('-1' to stop)" << endl;
        cout << "motor number: 1~4, '5' set all motors, '6' add same value: ";
        cin >> number >> pulse;

        motor_set_val(number, pulse);
    }while(number >= 0 && number <= 6);

    cout << "======================while out===================" << endl;
*/
    motor_stop();

    cout << "========================stop======================" << endl;

    return 0;
}

//Set motor pwm value
void motor_set_val(int number, int motor_val){
    int i;

    if (number == 6) {
        cout << "mode 6" << endl;
        int pwm[4];
        cout << "mode " << number << endl;
        for (i = 0; i < 4; i++) {
            pwm[i] = motor.getPWM(motor_no[i]);
            motor.setPWM(motor_no[i], pwm[i] + motor_val);
            cout << "set motor " << motor_no[i] << " as " << motor_val+pwm[i] << endl;
        }
    }
    else if(motor_val >= min_pulse && motor_val <= max_pulse){   //check value range
        if(number == 5){                                  //set all motor
            for(i = 0; i < 4; i++) {
                motor.setPWM(motor_no[i], motor_val);
                cout << "set motor " << motor_no[i] << " as " << motor_val << endl;
            }
        }
        else if(number >= 1 && number <= motor_num) {    //check motor numbers
            motor.setPWM(motor_no[number-1], motor_val);
            cout << "set motor " << motor_no[number-1] << " as " << motor_val << endl;
        }
    }
}

//Stop all motors
void motor_stop(){
    for(int i = 1; i <= motor_num; i++)
        motor_set_val(i, min_pulse);
}

//Set pid input and control motors' balance
void control()
{
    for (int i = 3; i < 7; i++) {
        control_core[i].pid.Calculate(imusol[i].imudata, control_core[i].target);
        //for (int j = 0; j < 4; j++)
            //motor_set_val(j+1, control_core[i].pid.output * control_core[i].weight[j]);
    }
}

//Initial pid control parameters
void control_init()
{
    for (int i = 0; i < 7; i++)
        control_core[i].target = 0;

    for (int i = 3; i < 7; i++)
        control_core[i].pid.Calculate(0, 0);

    control_core[4].weight[1] = -1;
    control_core[4].weight[3] = -1;
    control_core[5].weight[0] = -1;
    control_core[5].weight[3] = -1;
    control_core[6].weight[0] = -1;
    control_core[6].weight[1] = -1;
}
